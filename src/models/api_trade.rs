/*
 * Trader API
 *
 * Easy-to-use API for interacting with trader services on the Solana blockchain, powered by bloXroute Labs.
 *
 * The version of the OpenAPI document: 1.6
 * Contact: support@bloxroute.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiTrade {
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<models::ApiSide>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    #[serde(rename = "fillPrice", skip_serializing_if = "Option::is_none")]
    pub fill_price: Option<f64>,
    #[serde(rename = "orderID", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    #[serde(rename = "isMaker", skip_serializing_if = "Option::is_none")]
    pub is_maker: Option<bool>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(rename = "feeOrRebate", skip_serializing_if = "Option::is_none")]
    pub fee_or_rebate: Option<f64>,
    #[serde(rename = "orderPrice", skip_serializing_if = "Option::is_none")]
    pub order_price: Option<f64>,
}

impl ApiTrade {
    pub fn new() -> ApiTrade {
        ApiTrade {
            side: None,
            size: None,
            fill_price: None,
            order_id: None,
            is_maker: None,
            address: None,
            fee_or_rebate: None,
            order_price: None,
        }
    }
}

