/*
 * Trader API
 *
 * Easy-to-use API for interacting with trader services on the Solana blockchain, powered by bloXroute Labs.
 *
 * The version of the OpenAPI document: 1.6
 * Contact: support@bloxroute.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiGetOrderStatusResponse {
    #[serde(rename = "market", skip_serializing_if = "Option::is_none")]
    pub market: Option<String>,
    #[serde(rename = "openOrderAddress", skip_serializing_if = "Option::is_none")]
    pub open_order_address: Option<String>,
    #[serde(rename = "orderID", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    #[serde(rename = "clientOrderID", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<String>,
    #[serde(rename = "quantityReleased", skip_serializing_if = "Option::is_none")]
    pub quantity_released: Option<f32>,
    #[serde(rename = "quantityRemaining", skip_serializing_if = "Option::is_none")]
    pub quantity_remaining: Option<f32>,
    #[serde(rename = "fillPrice", skip_serializing_if = "Option::is_none")]
    pub fill_price: Option<f32>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<models::ApiSide>,
    #[serde(rename = "orderStatus", skip_serializing_if = "Option::is_none")]
    pub order_status: Option<models::ApiOrderStatus>,
    #[serde(rename = "orderPrice", skip_serializing_if = "Option::is_none")]
    pub order_price: Option<f32>,
}

impl ApiGetOrderStatusResponse {
    pub fn new() -> ApiGetOrderStatusResponse {
        ApiGetOrderStatusResponse {
            market: None,
            open_order_address: None,
            order_id: None,
            client_order_id: None,
            quantity_released: None,
            quantity_remaining: None,
            fill_price: None,
            side: None,
            order_status: None,
            order_price: None,
        }
    }
}

