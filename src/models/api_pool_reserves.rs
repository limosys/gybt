/*
 * Trader API
 *
 * Easy-to-use API for interacting with trader services on the Solana blockchain, powered by bloXroute Labs.
 *
 * The version of the OpenAPI document: 1.6
 * Contact: support@bloxroute.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiPoolReserves {
    #[serde(rename = "token1Reserves", skip_serializing_if = "Option::is_none")]
    pub token1_reserves: Option<String>,
    #[serde(rename = "token1Address", skip_serializing_if = "Option::is_none")]
    pub token1_address: Option<String>,
    #[serde(rename = "token2Reserves", skip_serializing_if = "Option::is_none")]
    pub token2_reserves: Option<String>,
    #[serde(rename = "token2Address", skip_serializing_if = "Option::is_none")]
    pub token2_address: Option<String>,
    #[serde(rename = "poolAddress", skip_serializing_if = "Option::is_none")]
    pub pool_address: Option<String>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<models::ApiProject>,
}

impl ApiPoolReserves {
    pub fn new() -> ApiPoolReserves {
        ApiPoolReserves {
            token1_reserves: None,
            token1_address: None,
            token2_reserves: None,
            token2_address: None,
            pool_address: None,
            project: None,
        }
    }
}

