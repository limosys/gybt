/*
 * Trader API
 *
 * Easy-to-use API for interacting with trader services on the Solana blockchain, powered by bloXroute Labs.
 *
 * The version of the OpenAPI document: 1.6
 * Contact: support@bloxroute.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiGetRateLimitResponse {
    #[serde(rename = "accountID", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(rename = "intervalNum", skip_serializing_if = "Option::is_none")]
    pub interval_num: Option<String>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<String>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<String>,
    #[serde(rename = "reset", skip_serializing_if = "Option::is_none")]
    pub reset: Option<String>,
    #[serde(rename = "streamInfos", skip_serializing_if = "Option::is_none")]
    pub stream_infos: Option<Vec<models::ApiStreamInfo>>,
}

impl ApiGetRateLimitResponse {
    pub fn new() -> ApiGetRateLimitResponse {
        ApiGetRateLimitResponse {
            account_id: None,
            tier: None,
            interval: None,
            interval_num: None,
            limit: None,
            count: None,
            reset: None,
            stream_infos: None,
        }
    }
}

